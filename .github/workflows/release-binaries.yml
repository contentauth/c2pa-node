name: Build release binaries

on:
  push:
    branches:
      - build-binaries
  release:
    types: ['created']

jobs:
  build-binaries:
    name: Build binaries for ${{matrix.target}}
    runs-on: ${{matrix.runner}}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
          - target: aarch64-apple-darwin
            runner: macos-14
          - target: x86_64-apple-darwin
            runner: macos-13
          - target: x86_64-pc-windows-msvc
            runner: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system deps (aarch64-unknown-linux-gnu)
        if: ${{matrix.target == 'aarch64-unknown-linux-gnu'}}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
          target: ${{matrix.target}}

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: pnpm

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{matrix.target}}

      - name: Install Node.js dependencies
        env:
          SKIP_RUST_BUILD: 1
        run: pnpm install

      - name: Build library for aarch64-unknown-linux-gnu
        if: ${{matrix.target == 'aarch64-unknown-linux-gnu'}}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
        run: |
          mkdir -p generated/${{matrix.target}}
          pnpm run build:rust --target=${{matrix.target}}

      - name: Build library
        id: build-library
        if: ${{!contains(fromJSON('["aarch64-unknown-linux-gnu"]'), matrix.target)}}
        run: |
          mkdir -p generated/${{matrix.target}}
          pnpm run build:rust --target=${{matrix.target}}

      - name: Package artifact
        id: package-artifact
        # This needs to be set so that this works on a Windows runner
        shell: bash
        env:
          ARCHIVE_FILENAME: c2pa-node_${{matrix.target}}-${{ github.event.release.tag_name || 'dev' }}.zip
        run: |
          cd generated
          7z a -tzip "${{ env.ARCHIVE_FILENAME }}" c2pa.node
          echo "archive=${{ env.ARCHIVE_FILENAME }}" >> "$GITHUB_OUTPUT"

      - name: Upload artifact (development only)
        id: upload-artifact
        uses: actions/upload-artifact@v4
        if: ${{ github.event.release.upload_url == '' }}
        with:
          name: ${{ steps.package-artifact.outputs.archive }}
          path: generated/${{ steps.package-artifact.outputs.archive }}
          retention-days: 3

      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.event.release.upload_url != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: generated/${{ steps.package-artifact.outputs.archive }}
          asset_name: ${{ steps.package-artifact.outputs.archive }}
          asset_content_type: application/zip
